!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};class t{constructor(e,t,s,r,i,a){let{isLiked:n,_id:o,name:l,link:c}=e;this._isLiked=n,this._id=o,this._name=l,this._link=c,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleCardLike=i,this._checkIfLiked=a}_setEventListeners(){this._cardElement.querySelector(".heart-button").addEventListener("click",(()=>{this._handleHeartButton(),this._handleCardLike(this)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)}))}_handleHeartButton(){console.log(this._cardElement),this._cardElement.querySelector(".heart-button").classList.toggle("heart-button_active")}domDeleteCard(){this._cardElement.remove(),this._cardElement=null}generateCard(){return this._cardElement=this._cardSelector.cloneNode(!0),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._setEventListeners(),this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._cardTitleEl.textContent=this._name,this._checkIfLiked(this._isLiked,this._cardElement),this._cardElement}}class s{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._errorList=e.errorList,this._inputElements=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageElement.textContent=e.validationMessage,this._errorMessageElement.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageElement.textContent="",this._errorMessageElement.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return Array.from(this._inputElements).some((e=>!e.validity.valid))}toggleButtonState(){this._hasInvalidInput()?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this.toggleButtonState(),this._setEventListeners()}resetValidation(){this._form.reset(),this.toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}}class r{constructor(e){this._modalSelector=e,this._modal=document.querySelector(this._modalSelector),this._closeWithEsc=this._closeWithEsc.bind(this),this._closeWithClick=this._closeWithClick.bind(this)}open(){this._modal.classList.add("modal_opened"),document.addEventListener("keydown",this._closeWithEsc),this._modal.addEventListener("click",this._closeWithClick)}close(){document.removeEventListener("keydown",this._closeWithEsc),this._modal.removeEventListener("click",this._closeWithClick),this._modal.classList.remove("modal_opened")}_closeWithEsc(e){"Escape"===e.key&&this.close()}_closeWithClick(e){e.target===e.currentTarget&&this.close()}setEventListeners(){const e=this._modal.querySelector(".modal__close");e&&e.addEventListener("click",(()=>{console.log("Close button clicked"),this.close()}))}}class i extends r{constructor(e,t){super(e),this._modalForm=this._modal.querySelector(".modal__form"),this._inputList=[...this._modalForm.querySelectorAll(".modal__input")],this._handleFormSubmit=t}close(){super.close(this._modal)}setLoading(e,t){const s=this._modal.querySelector(".modal__button");console.log(s),s.textContent=e?t:"Save"}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),console.log(e),e}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),console.log(this._getInputValues),this._handleFormSubmit(this._getInputValues()),this._modalForm.reset()}))}}const a=document.querySelector(".profile__avatar_edit-button"),n=document.querySelector("#profile-edit-button"),o=document.querySelector("#profile-edit-modal"),l=document.querySelector("#profile-name-input"),c=document.querySelector("#profile-badge-input"),d=o.querySelector("#modal-form-1"),h=document.querySelector("#avatar-change-modal").querySelector("#modal-form-3"),_=document.querySelector("#card-template").content.firstElementChild,u=(document.querySelector(".cards"),document.querySelector("#card-add-button")),m=document.querySelector("#card-add-modal").querySelector("#modal-form-2"),g=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}}({renderer:e=>{g.addItem(k(e))}},".cards"),p=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}async getIntitialCards(){const e=await fetch(this._baseUrl+"/cards",{headers:this._headers});return await this._checkResponse(e)}async getUserInfo(){const e=await fetch(this._baseUrl+"/users/me",{headers:this._headers});return await this._checkResponse(e)}async deleteCard(e){const t=await fetch(this._baseUrl+"/cards/"+e,{method:"DELETE",headers:this._headers});return await this._checkResponse(t)}async addCard(e){const t=await fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.cardUrl})});return await this._checkResponse(t)}async updateProfile(e){const t=await fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.badge})});return await this._checkResponse(t)}async addLikes(e){console.log(e);const t=await fetch(this._baseUrl+"/cards/"+e+"/likes",{method:"PUT",headers:this._headers});return await this._checkResponse(t)}async removeLikes(e){const t=await fetch(this._baseUrl+"/cards/"+e+"/likes",{method:"DELETE",headers:this._headers});return await this._checkResponse(t)}async checkLikesTruthy(e){const t=await fetch(this._baseUrl+"/cards/"+e,{method:"GET",headers:this._headers});return await this._checkResponse(t)}async updateAvatar(e){const t=await fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})});return await this._checkResponse(t)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"53632a1f-419c-4aa1-93c5-782b5878b96a","Content-Type":"application/json"}});p.getIntitialCards().then((e=>{g.renderItems(e)})).catch((e=>{console.error(e)})),p.getUserInfo().then((e=>{console.log(e),L.setUserInfo(e.name,e.about,e.avatar)}));const v=new i("#profile-edit-modal",(function(e){let{name:t,badge:s}=e;L.setUserInfoOnSubmit(t,s),v.setLoading(!0,"Saving..."),p.updateProfile({name:t,badge:s}).then((e=>{console.log(e)})).finally(v.setLoading(!1,"Saving...")),v.close()}));v.setEventListeners();const E=new i("#card-add-modal",(function(e){let{name:t,cardUrl:s}=e;g.addItem(k({name:t,link:s})),E.setLoading(!0,"Saving..."),p.addCard({name:t,cardUrl:s}).then((e=>{console.log(e)})).finally(E.setLoading(!1,"Saving...")),E.close()}));E.setEventListeners();const b=new class extends r{constructor(e){super(e),this._previewImageModal=this._modal,this._image=this._previewImageModal.querySelector("#modal-preview-image-src"),this._text=this._previewImageModal.querySelector(".modal__image-preview_text")}open(e,t){this._image.src=t,this._image.alt=e,this._text.textContent=e,super.open()}}("#image-preview-modal");b.setEventListeners();const S=new class extends r{constructor(e,t){super(e),this.handleFormSubmit=t}open(e){this.card=e,console.log(this.card._id),super.open(this._modal)}close(){super.close(this._modal)}setLoadingConfirm(e,t){const s=this._modal.querySelector(".modal__button_delete-check");console.log(s),s.textContent=e?t:"Save"}setEventListeners(){super.setEventListeners(),this._modal.addEventListener("submit",(e=>{e.preventDefault(),this.handleFormSubmit(this.card)}))}}("#delete-check-modal",(function(e){console.log(e._id),p.deleteCard(e._id).then((t=>{console.log(t),e.domDeleteCard(),S.close()}))}));S.setEventListeners();const f=new i("#avatar-change-modal",(function(e){console.log(e.avatarUrl),f.setLoading(!0,"Saving..."),p.updateAvatar(e.avatarUrl).then((e=>{console.log(e)})).finally(f.setLoading(!1,"Saving...")),L.setAvatarPic(e.avatarUrl),f.close()}));f.setEventListeners();const L=new class{constructor(e,t,s){this._name=document.querySelector(e),this._badge=document.querySelector(t),this._avatar=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent.trim(),badge:this._badge.textContent}}setUserInfoOnSubmit(e,t){this._name.textContent=e,this._badge.textContent=t}setUserInfo(e,t,s){this._name.textContent=e,this._badge.textContent=t,this._avatar.src=s}setAvatarPic(e){this._avatar.src=e}}(".profile__name",".profile__badge",".profile__picture");function y(e,t){b.open(e,t)}function k(e){return new t(e,_,y,w,B,C).generateCard()}function C(e,t){!0===e&&t.querySelector(".heart-button").classList.toggle("heart-button_active")}function w(e){console.log(e),S.open(e)}const I=new s(e,d),q=new s(e,m),U=new s(e,h);function B(e){!1===e.isLiked?p.addLikes(e._id).then((e=>{console.log(e)})):(p.removeLikes(e._id).then((e=>{console.log(e)})),console.log(e._id))}U.enableValidation(),I.enableValidation(),q.enableValidation(),n.addEventListener("click",(()=>{const e=L.getUserInfo();I.resetValidation(),l.value=e.name,c.value=e.badge,v.open()})),u.addEventListener("click",(()=>{E.open(),q.toggleButtonState()})),a.addEventListener("click",(()=>{f.open(),U.toggleButtonState()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,